# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: TextToAudio Application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 
        if [ -f textToAudioApp/requirements.txt ]; then pip install -r textToAudioApp/requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Setup sonar-scanner
#    - name: Setup SonarQube
#      uses: warchant/setup-sonar-scanner@v8
#    - name: Set up JDK 17
#      uses: actions/setup-java@v3
#      with:
#        java-version: '17'
#
#    - name: Analyze with SonarCloud
#      uses: SonarSource/sonarqube-scan-action@7295e71c9583053f5bf40e9d4068a0c974603ec8
#      env:
#        GITHUB_TOKEN: ${{ secrets._GITHUB_TOKEN }}
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
#      with:
#        args:
#          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
#          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
#          -Dsonar.host.url=${{ secrets.SONAR_URL }}
#          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#          -Dsonar.projectBaseDir=textToAudioApp


#  backend-security:
##    needs: backend-test
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ./textToAudioApp
#    steps:
#      - uses: actions/checkout@master
#      - name: Run Snyk to check for vulnerabilities
#        uses: snyk/actions/node@master
#        continue-on-error: true # To make sure that SARIF upload gets called
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#
#      - name: Install Snyk CLI
#        uses: snyk/actions/setup@master
#        with:
#          version: latest
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#
#      - name: Snyk Authenticate
#        run: snyk auth ${{ secrets.SNYK_TOKEN }}
#
#      - name: Snyk Code Test
#        run: snyk code test --all-projects
#        continue-on-error: true




  backend-image:
#    needs: backend-security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - uses: actions/checkout@v4

    - name: Build and push backend Docker image
      working-directory: ./textToAudioApp
      run: |
        docker build . -t ${{ secrets.DOCKER_USERNAME }}/textToAudioApp-api
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin 
        docker push ${{ secrets.DOCKER_USERNAME }}/textToAudioApp-api    

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/textToAudioApp-api'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

#    - name: Install Snyk CLI
#      uses: snyk/actions/setup@master
#      with:
#        snyk-token: ${{ secrets.SNYK_TOKEN }}
#
#    - name: Snyk Authenticate
#      run: snyk auth ${{ secrets.SNYK_TOKEN }}
#
#    - name: Snyk Container monitor
#      run: snyk container monitor ${{ secrets.DOCKER_USERNAME }}/textToAudioApp-api --file=Dockerfile
#      working-directory: ./textToAudioApp
#
#    - name: Run Snyk to check for vulnerabilities in the Docker image
#      uses: snyk/actions/docker@master
#      with:
#        image: ${{ secrets.DOCKER_USERNAME }}/backend-api
#        args: --file=textToAudioApp/Dockerfile --severity-threshold=high
#      env:
#        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#      continue-on-error: true


  k8s-manifest-scan:
#    needs: [backend-security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check Kubernetes manifest file for issues
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: kubernetes-manifest/
          args: --severity-threshold=high

